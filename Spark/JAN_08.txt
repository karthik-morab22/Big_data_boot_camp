>>> from pyspark.sql.functions import *
>>> df3.show()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'df3' is not defined
>>> empDf=spark.read.option("header",True).option("inferSchema",True).csv("/data/employees.csv")
>>> emDf.show(10)                                                               
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'emDf' is not defined
>>> empDf.show(10)
+-----------+----------+---------+--------+------------+---------+----------+------+--------------+----------+-------------+
|EMPLOYEE_ID|FIRST_NAME|LAST_NAME|   EMAIL|PHONE_NUMBER|HIRE_DATE|    JOB_ID|SALARY|COMMISSION_PCT|MANAGER_ID|DEPARTMENT_ID|
+-----------+----------+---------+--------+------------+---------+----------+------+--------------+----------+-------------+
|        198|    Donald| OConnell|DOCONNEL|650.507.9833|21-JUN-07|  SH_CLERK|  2600|            - |       124|           50|
|        199|   Douglas|    Grant|  DGRANT|650.507.9844|13-JAN-08|  SH_CLERK|  2600|            - |       124|           50|
|        200|  Jennifer|   Whalen| JWHALEN|515.123.4444|17-SEP-03|   AD_ASST|  4400|            - |       101|           10|
|        201|   Michael|Hartstein|MHARTSTE|515.123.5555|17-FEB-04|    MK_MAN| 13000|            - |       100|           20|
|        202|       Pat|      Fay|    PFAY|603.123.6666|17-AUG-05|    MK_REP|  6000|            - |       201|           20|
|        203|     Susan|   Mavris| SMAVRIS|515.123.7777|07-JUN-02|    HR_REP|  6500|            - |       101|           40|
|        204|   Hermann|     Baer|   HBAER|515.123.8888|07-JUN-02|    PR_REP| 10000|            - |       101|           70|
|        205|   Shelley|  Higgins|SHIGGINS|515.123.8080|07-JUN-02|    AC_MGR| 12008|            - |       101|          110|
|        206|   William|    Gietz|  WGIETZ|515.123.8181|07-JUN-02|AC_ACCOUNT|  8300|            - |       205|          110|
|        100|    Steven|     King|   SKING|515.123.4567|17-JUN-03|   AD_PRES| 24000|            - |        - |           90|
+-----------+----------+---------+--------+------------+---------+----------+------+--------------+----------+-------------+
only showing top 10 rows

>>> empDf.printSchema()
root
 |-- EMPLOYEE_ID: integer (nullable = true)
 |-- FIRST_NAME: string (nullable = true)
 |-- LAST_NAME: string (nullable = true)
 |-- EMAIL: string (nullable = true)
 |-- PHONE_NUMBER: string (nullable = true)
 |-- HIRE_DATE: string (nullable = true)
 |-- JOB_ID: string (nullable = true)
 |-- SALARY: integer (nullable = true)
 |-- COMMISSION_PCT: string (nullable = true)
 |-- MANAGER_ID: string (nullable = true)
 |-- DEPARTMENT_ID: integer (nullable = true)

>>> empDf.count()
50
>>> empDf.count("SALARY")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: count() takes 1 positional argument but 2 were given
>>> empDf.count("SALARY").show()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: count() takes 1 positional argument but 2 were given
>>> empDf.select(count("SALARY")).show()
+-------------+
|count(SALARY)|
+-------------+
|           50|
+-------------+

>>> empDf.select(count("SALARY").alias("MAX_SAL")).show()
+-------+
|MAX_SAL|
+-------+
|     50|
+-------+

>>> empDf.select(max("SALARY").alias("MAX_SAL")).show()
+-------+
|MAX_SAL|
+-------+
|  24000|
+-------+

>>> empDf.select(min("SALARY").alias("MIN_SAL")).show()
+-------+
|MIN_SAL|
+-------+
|   2100|
+-------+

>>> 
